let chalk,fs,ncp,path,promisify,execa,Listr,projectInstall;_35b‍.x([["createProject",()=>createProject]]);_35b‍.w("chalk",[["default",["chalk"],function(v){chalk=v}]]);_35b‍.w("fs",[["default",["fs"],function(v){fs=v}]]);_35b‍.w("ncp",[["default",["ncp"],function(v){ncp=v}]]);_35b‍.w("path",[["default",["path"],function(v){path=v}]]);_35b‍.w("util",[["promisify",["promisify"],function(v){promisify=v}]]);_35b‍.w("execa",[["default",["execa"],function(v){execa=v}]]);_35b‍.w("listr",[["default",["Listr"],function(v){Listr=v}]]);_35b‍.w("pkg-install",[["projectInstall",["projectInstall"],function(v){projectInstall=v}]]);








const access = promisify(fs.access);
const copy = promisify(ncp);

async function copyTemplateFiles(options) {
 return copy(options.templateDirectory, options.targetDirectory, {
   clobber: false,
 });
}

async function initGit(options) {
 const result = await execa('git', ['init'], {
   cwd: options.targetDirectory,
 });
 if (result.failed) {
   return Promise.reject(new Error('Failed to initialize git'));
 }
 return;
}

       async function createProject(options) {
 _35b‍.g.console.log('cwd',process.cwd())
 options = {
   ...options,
   targetDirectory: options.targetDirectory || path.join(process.cwd())
 };

 const templateDir = path.resolve(
   new URL(_35b‍._.meta.url).pathname,
   '../../templates',
   options.template
 );
 options.templateDirectory = templateDir;

 try {
   await access(templateDir, fs.constants.R_OK);
 } catch (err) {
   _35b‍.g.console.error('%s Invalid template name', chalk.red.bold('ERROR'));
   process.exit(1);
 }

 const tasks = new Listr([
   {
     title: 'Copy project files',
     task: () => copyTemplateFiles(options),
   },
   {
     title: 'Initialize git',
     task: () => initGit(options),
     enabled: () => options.git,
   },
   {
     title: 'Install dependencies',
     task: () =>
       projectInstall({
         cwd: options.targetDirectory,
       }),
     skip: () =>
       !options.runInstall
         ? 'Pass --install to automatically install dependencies'
         : undefined,
   },
 ]);

 await tasks.run();
 _35b‍.g.console.log('%s Project ready', chalk.green.bold('DONE'));
 return true;
}